/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
  const m = graph.length;
  const roots = [...new Array(m)].map((_, i) => i);
  const sizes = new Array(m).fill(1);
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < m; j++) {
      if (i !== j && graph[i][j] === 1) {
        const ri = find(roots, i);
        const rj = find(roots, j);
        if (ri !== rj) {
          union(roots, sizes, ri, rj);
        }
      }
    }
  }
  const infecteds = {};
  for (const i of initial) {
    const r = find(roots, i);
    infecteds[r] = (infecteds[r] || 0) + 1;
  }
  initial.sort((a, b) => a - b);
  let j = initial[0];
  for (const i of initial) {
    const ri = find(roots, i);
    const rj = find(roots, j);
    if (infecteds[ri] === 1) {
      if (sizes[ri] > sizes[rj]) {
        j = i;
      }
    }
  }
  return j;
};

function find(roots, r) {
  let ptr = r;
  while (roots[ptr] !== ptr) {
    roots[ptr] = roots[roots[ptr]];
    ptr = roots[ptr];
  }
  return ptr;
}

function union(roots, sizes, r1, r2) {
  roots[r1] = r2;
  sizes[r2] += sizes[r1];
}
